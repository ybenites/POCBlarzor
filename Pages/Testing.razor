@page "/crudx"
@inject HttpClient client

@using Newtonsoft.Json
@using Data

<div class="row" style="margin:25px; margin-top:100px;">

        <strong>Post, Put and Delete Operations Table Data</strong><hr />
        @if (CRUDUsers != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Full Name</th>
                        <th>Job</th>
                        <th>Created Timestamp</th>
                        <th>Updated Timestamp</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in CRUDUsers)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            <td>@user.Job</td>
                            <td>@user.CreatedTimestamp</td>
                            <td>@user.UpdatedTimestamp</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!CRUDUsers.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>

    <div class="row" style="margin:10px; margin-top:70px;">
        <div class="col"><button class="btn btn-success" @onclick="ShowHideCreateUserForm">Show/Hide Create Form</button>   </div>
        <div class="col"><button class="btn btn-warning" @onclick="ShowHideUpdateUserForm">Show/Hide Update User Form</button></div>
        <div class="col"><button class="btn btn-danger" @onclick="ShowHideDeleteUserForm">Show/Hide Delete User Form</button></div>
    </div>

    <div class="row" hidden="@ShowCreateUserForm" style="border:3px solid black;margin:20px;">
        <EditForm Model="@crudUser">
            <div class="row form-inline" style="margin:20px;">
                <div class="form-group" style="margin:20px;">
                    <label for="Name" style="margin:10px;">Name</label>
                    <InputText Id="Name" @bind-Value="@crudUser.Name"></InputText>
                </div>
                <div class="form-group" style="margin:20px;">
                    <label for="Job" style="margin:10px;">Job Description</label>
                    <InputText Id="Job" @bind-Value="@crudUser.Job"></InputText>
                </div>

                <button class="btn btn-success" @onclick="@CreateNewUser">Create</button>
            </div>
        </EditForm>
    </div>

    <div class="row" hidden="@ShowUpdateUserForm" style="border:3px solid black;margin:20px;">
        <EditForm Model="@selectedUser">
            <div class="row form-inline" style="margin:20px;">
                <div class="form-group" style="margin:20px;">
                    <label for="UseId" style="margin:10px;">User Id</label>
                    <select id="UserId" @onchange=@UpdateSelectedUser>
                        <option value="2">2</option>
                        @if (CRUDUsers != null)
                        {
                            @foreach (var user in CRUDUsers)
                            {
                                <option value="@user.Id">@user.Id</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group" style="margin:20px;">
                    <label for="Name" style="margin:10px;">Name</label>
                    <InputText Id="Name" @bind-Value="@selectedUser.Name"></InputText>
                </div>
                <div class="form-group" style="margin:20px;">
                    <label for="Job" style="margin:10px;">Job Description</label>
                    <InputText Id="Job" @bind-Value="@selectedUser.Job"></InputText>
                </div>

                <button class="btn btn-warning" @onclick="@UpdateUser">Update</button>
            </div>
        </EditForm>
    </div>

    <div class="row" hidden="@ShowUpdateDeleteForm" style="border:3px solid black;margin:20px;">
        <EditForm Model="@selectedUser">
            <div class="row form-inline" style="margin:20px;">
                <div class="form-group" style="margin:20px;">
                    <label for="UseId" style="margin:10px;">User Id</label>
                    <select id="UserId" @onchange=@UpdateSelectedUser>
                        @if (CRUDUsers != null)
                        {
                            @foreach (var user in CRUDUsers)
                            {
                                <option value="@user.Id">@user.Id</option>
                            }
                        }
                    </select>

                    <div class="form-group" style="margin:20px;">
                        <label for="Name" style="margin:10px;">Name</label>
                        <InputText Id="Name" @bind-Value="@selectedUser.Name"></InputText>
                    </div>
                    <div class="form-group" style="margin:20px;">
                        <label for="Job" style="margin:10px;">Job Description</label>
                        <InputText Id="Job" @bind-Value="@selectedUser.Job"></InputText>
                    </div>

                </div>
                <button class="btn btn-danger" @onclick="@DeleteUser">Delete</button>
            </div>
        </EditForm>

    </div>

    @code {
        List<CRUDUser> CRUDUsers = new List<CRUDUser>();

    CRUDUser crudUser = new CRUDUser();

    bool ShowCreateUserForm = true;

    private void ShowHideCreateUserForm()
    {
        ShowCreateUserForm = !ShowCreateUserForm;
    }

    private async Task CreateNewUser()
    {
        string apiName = "api/users";
        var postData = JsonConvert.SerializeObject(crudUser);
        var response = await client.PostAsync(apiName, new StringContent(postData));

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CRUDUser user = JsonConvert.DeserializeObject<CRUDUser>(await response.Content.ReadAsStringAsync());
            if (user != null)
            {
                user.Name = crudUser.Name;
                user.Job = crudUser.Job;
                CRUDUsers.Add(user);
                crudUser = new CRUDUser();
            }
        }
    }

    CRUDUser selectedUser = new CRUDUser();
    bool ShowUpdateUserForm = true;

    private void ShowHideUpdateUserForm()
    {
        ShowUpdateUserForm = !ShowUpdateUserForm;
    }

    void UpdateSelectedUser(ChangeEventArgs e)
    {
        int id = int.Parse(e.Value.ToString());
        selectedUser = CRUDUsers.FirstOrDefault(u => u.Id == id);
    }

    private async Task UpdateUser()
    {
        string apiName = string.Format($"api/users/{selectedUser.Id}");

        var postData = JsonConvert.SerializeObject(selectedUser);
        var response = await client.PutAsync(apiName, new StringContent(postData));

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            CRUDUser user = JsonConvert.DeserializeObject<CRUDUser>(await response.Content.ReadAsStringAsync());
            if (user != null)
            {
                user.Id = selectedUser.Id;
                user.Name = selectedUser.Name;
                user.Job = selectedUser.Job;
                user.CreatedTimestamp = selectedUser.CreatedTimestamp;

                // Remove the old item from the list and replace it with the updated one
                var temp = CRUDUsers.FirstOrDefault(u => u.Id == selectedUser.Id);
                CRUDUsers.Remove(temp);
                CRUDUsers.Add(user);
            }
        }
    }

    bool ShowUpdateDeleteForm = true;
    private void ShowHideDeleteUserForm()
    {
        ShowUpdateDeleteForm = !ShowUpdateDeleteForm;
    }

    private async Task DeleteUser()
    {
        string apiName = string.Format($"api/users/{selectedUser.Id}");
        var response = await client.DeleteAsync(apiName);

        if (response.IsSuccessStatusCode)
        {
            var temp = CRUDUsers.FirstOrDefault(u => u.Id == selectedUser.Id);
            CRUDUsers.Remove(temp);
            selectedUser = new CRUDUser();
        } 
    } 
    }